#compdef mediastreamsegmenter
# ------------------------------------------------------------------------------
# MIT License
#
# Copyright 2022 Shohei Yoshida
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# ------------------------------------------------------------------------------
# Description
# -----------
#
#  Completion script for mediastreamsegmenter 1.17
#
# ------------------------------------------------------------------------------
# Authors
# -------
#
#  * Shohei Yoshida (https://github.com/syohex)
#
# ------------------------------------------------------------------------------

_arguments \
  '(-b --base-url)'{-b,--base-url}'[Base url]:url' \
  '(-t --target-duration)'{-t,--target-duration=}'[Target duration for each segment]:duration' \
  '(-w --part-target-duration-ms)'{-w,--part-target-duration-ms=}'[partial segment target duration in milliseconds]:msecs' \
  '(-U --exit-on-receive-data-format)'{-U,--exit-on-receive-data-timeout}'[exit instead of pausing the broad cast when not receiving data]' \
  '(-f --file-base)'{-f,--file-base=}'[Path at which to store index and media files]: :_files -/' \
  '(-p --program)'{-p,--program}'[create VOD/program]' \
  '(-P --program-duration)'{-P,--program-duration=}'[specify duration in minutes]:minutes' \
  '(-i --index-file)'{-i,--index-file=}'[Index file name(default prog_index.m3u8)]:name' \
  '(-B --base-media-file-name)'{-B,--base-media-file-name=}'[Base media file name(default fileSequence)]:name' \
  '(-s --sliding-window-entries)'{-s,--sliding-window-entries=}'[maximum number of entries in index file]:num' \
  '(-I --initial-sequence-number)'{-I,--initial-sequence-number=}'[initial sequence number to add to base-media-file-name]:num' \
  '(-D --delete-files)'{-D,--delete-files}'[delete files after they expire]' \
  '(-Q --iso-fragmented)'{-Q,--iso-fragmented}'[package segments as fMP4 instead of TS]' \
  '(-W --cmaf-fragmented)'{-W,--cmaf-fragmented}'[package segments as CMAF-compatible fMP4 instead of TS]' \
  '(- *)'{-v,--version}'[show version number]' \
  '(-T --date-time)'{-T,--date-time}'[stamp the playlist with a date-time tag]' \
  '(-k --encrypt-key)'{-k,--encrypt-key=}'[base path to write encryption key]: :_files' \
  '(-K --encrypt-key-url)'{-K,--encrypt-key-url=}'[URL to insert into playlist]:url' \
  '(-J --encrypt-iv)'{-J,--encrypt-iv=}'[Specify method of generation of IV for encryption]: :(random sequence)' \
  '-key-rotation-period=[Rotates key every <period> segments(Default is 4 hours)]:period' \
  '(-n -base-encrypt-key-name)'{-n,-base-encrypt-key-name=}'[Crypt key file name]:' \
  '-encrypt-rotate-iv-mbytes=[Number of megabytes to rotate the IV(Default 50)]:num' \
  '(-m --enable-matadata-rx)'{-m,--enable-metadata-rx}'[enable meta data reception]' \
  '(-M --meta-rx-port)'{-m,--meta-rx-port=}'[TCP port to receive meta data on(default 50000)]:port' \
  '(-F --meta-file)'{-F,--meta-file=}'[Meta data file to load for each segment]: :_files' \
  '(-y --meta-type)'{-y,--meta-type=}'[Meta  data format for metadata file to]: :(id3 private picture)' \
  '(-l --log-file)'{-l,--log-file=}'[Enable log file]: :_files' \
  '(-q --quiet)'{-q,--quiet}'[Only output errors]' \
  '--reuse-media-entry-names=[reuse media file names every <num> entries]:num' \
  '(-a --audio-only)'{-a,--audio-only}'[Only use audio from the stream]' \
  '--video-only[Only use video/closed caption tracks]' \
  '--no-floating-point-duration[Do not use float point durations]' \
  '(-O --optimize)'{-O,--optimize}'[create optimized transport streams]' \
  '(- *)'{-h,--help}'[show help]' \
  '(-c --file-complete-command)'{-C,--file-complete-command=}'[Execute <cmd> as system command when index or media file written]:cmd' \
  '(-C --file-delete-command)'{-C,--file-delete-command=}'[Execute <cmd> as system command when index or media file id deleted]:cmd' \
  '(-e --crypt-file-complete-command)'{-e,--crypt-file-complete-command=}'[Execute <cmd> as system command when cryptkey file written]:cmd' \
  '(-E --crypt-file-delete-command)'{-E,--crypt-file-delete-command=}'[Execute <cmd> as system command when cryptkey file is deleted]:cmd' \
  '(-V --notification-host)'{-V,--notification-host=}'[host to ping every time index is updated]:host_or_ip' \
  '(-Y --notification-port)'{-Y,--notification-port=}'[UDP port to ping every time index is updated]:port' \
  '*:files:_files'

# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 ts=2 et
